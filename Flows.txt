			Холодные и горячие потоки

 Ну, я действительно боролся с этой концепцией, потому что это немного сложно. Основное различие между холодным и горячим оказалось довольно простым: горячие потоки производят, когда вам все равно, в то время как в холодных потоках, если вы не выполняете collect() (или эквивалент RxJava-s subscribe()), поток не будет быть активирована вообще. Итак, Потоки — это то, что мы называем холодными потоками. Удаление подписчика вообще не приведет к созданию данных, что делает Flows одним из самых сложных API асинхронных потоков (в мире JVM).


 Холодный поток — это то, что вам нужно, если потоку нужен коллектор. Каждый коллектор имеет собственный экземпляр лежащего в основе холодного потока. Его собирают, делают и уходят.

 Горячий поток, с другой стороны, на самом деле не слишком заботится о том, собирается он или нет в данный момент. Он всегда рядом (в памяти) и публикует события приложения , испускаемые, возможно, несколькими сопрограммами. Когда некоторые стороны заинтересованы в этом, они подписываются на collect, и все получат одно и то же событие (или набор событий), испускаемое из этого горячего потока. Очень похоже на автобус событий.

 В отличие от холодных потоков, горячие потоки всегда находятся в памяти, даже если нет подписчиков/коллекторов и они активны по умолчанию. Холодные потоки ленивы. Однако горячие потоки лучше подходят для совместного использования состояния несколькими наблюдателями.